name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  DOCKER_BUILDKIT: 1

jobs:
  # Job 1: Code Quality Checks
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Run Black formatter
        run: black src/ tests/

      - name: Run Flake8 linter
        run: |
          flake8 src/ tests/ \
            --max-line-length=120 \
            --ignore=E203,W503 \
            --per-file-ignores="tests/*:E402"

      - name: Run isort import checker
        run: isort --check-only src/ tests/

      - name: Run mypy type checker
        run: mypy src/ --ignore-missing-imports

  # Job 2: Run Tests
  test:
    needs: lint-and-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Generate test data
        run: python src/data_processing/generate_data.py

      - name: Train models for testing
        run: |
          python -c "
          from src.data_processing.generate_data import create_fraud_dataset
          from src.data_processing.feature_engineering import AdvancedFeatureEngineering
          from src.models.fraud_detector import EnsembleFraudDetector
          import os, joblib
          # Create small dataset
          df = create_fraud_dataset(n_samples=1000)
          fe = AdvancedFeatureEngineering(target_column='Class')
          df_processed = fe.fit_transform(df)
          # Train ensemble
          X = df_processed.drop('Class', axis=1)
          y = df_processed['Class']
          ensemble = EnsembleFraudDetector()
          ensemble.train(X, y, test_size=0.2, balance_data=False)
          # Save models
          os.makedirs('models', exist_ok=True)
          joblib.dump(fe, 'models/feature_engineering_pipeline.pkl')
          ensemble.save_ensemble('models/fraud_detection_ensemble.pkl')
          "

      - name: Run tests with coverage
        run: pytest tests/ -v --cov=src --cov-report=xml --cov-report=html -n auto

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Job 3: Build and Test Docker Images
  docker-build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build API Docker image
        run: |
          docker build --target api -t fraud-api:test -f docker/Dockerfile .

      - name: Build Dashboard Docker image
        run: |
          docker build --target dashboard -t fraud-dashboard:test -f docker/Dockerfile .

      - name: Test Docker Compose
        run: |
          docker-compose up -d
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker-compose down

  # Job 4: Security Scanning
  security-scan:
    needs: lint-and-format
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check Python dependencies for vulnerabilities
        run: |
          python -m pip install --upgrade pip
          pip install safety
          safety check --json

  # Job 5: Deploy (only on main branch)
  deploy:
    needs: [test, docker-build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build --target api -t ${{ secrets.DOCKER_USERNAME }}/fraud-api:latest -f docker/Dockerfile .
          docker build --target dashboard -t ${{ secrets.DOCKER_USERNAME }}/fraud-dashboard:latest -f docker/Dockerfile .
          docker push ${{ secrets.DOCKER_USERNAME }}/fraud-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/fraud-dashboard:latest

      - name: Deploy to production
        run: |
          echo "Deployment steps would go here"
          # Examples:
          # - Deploy to AWS ECS/EKS
          # - Deploy to Google Cloud Run
          # - Deploy to Azure Container Instances
          # - Update Kubernetes manifests
